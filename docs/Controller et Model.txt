Code Existant - Controller et Model 

Main_Model :
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Main_Model extends CI_Model {
    
    public function __construct() {
        parent::__construct();
    }

    // Récupérer toutes les données d'une table
    public function get_all($table) {
        return $this->db->get($table)->result();
    }

    // Récupérer une ligne par ID avec clé primaire personnalisée
    public function get_by_id($table, $id, $primary_key = 'id') {
        return $this->db->get_where($table, [$primary_key => $id])->row();
    }

    // Récupérer des entrées avec une condition
    public function get_where($table, $conditions = []) {
        return $this->db->get_where($table, $conditions)->result();
    }

    // Insérer une entrée
    public function insert($table, $data) {
        return $this->db->insert($table, $data);
    }

    // Insérer plusieurs entrées en une seule requête
    public function insert_batch($table, $data) {
        return $this->db->insert_batch($table, $data);
    }

    // Mettre à jour une entrée avec clé primaire personnalisée
    public function update($table, $id, $data, $primary_key = 'id') {
        return $this->db->where($primary_key, $id)->update($table, $data);
    }

    // Mettre à jour plusieurs entrées en une seule requête
    public function update_batch($table, $data, $primary_key) {
        return $this->db->update_batch($table, $data, $primary_key);
    }

    // Supprimer une entrée avec clé primaire personnalisée
    public function delete($table, $id, $primary_key = 'id') {
        return $this->db->where($primary_key, $id)->delete($table);
    }

    // Compter les entrées avec conditions optionnelles
    public function count($table, $conditions = []) {
        if (!empty($conditions)) {
            $this->db->where($conditions);
        }
        return $this->db->count_all_results($table);
    }
}
?>


Vitrine_Controller :
<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Vitrine_Controller extends CI_Controller {

    public function __construct() {
        parent::__construct();
        $this->load->model('Vitrine_Model');
        $this->load->helper('url');
        $this->load->library('session');
    }

    // Page principale avec tri des box
    public function index() {
        $sort = $this->input->get('sort'); 
        $data['boxes'] = $this->Vitrine_Model->get_sorted_boxes($sort);
        $this->load->view('vitrine_box', $data);
    }

    // Détails d'un box
    public function detail($id) {
        $id = (int) $id; // Sécurisation de l'ID

        if ($id <= 0 || !($data['box'] = $this->Vitrine_Model->get_box_details($id))) {
            log_message('error', 'Tentative d\'accès à un box inexistant ou ID invalide : ' . $id);
            $this->session->set_flashdata('error', 'Box introuvable.');
            redirect('Vitrine_Controller/index');
        }

        log_message('debug', 'Détails du box affichés : ' . print_r($data['box'], true));
        $this->load->view('page_box', $data);
    }

    // Gérer une réservation
    public function reserver() {
        $box_id = (int) $this->input->post('box_id');
        $start_date = $this->input->post('start_date');
        $end_date = $this->input->post('end_date');

        // Vérification de l'ID du box
        if ($box_id <= 0) {
            log_message('error', 'Réservation avec un ID de box invalide : ' . $box_id);
            $this->session->set_flashdata('error', 'Box introuvable.');
            redirect('Vitrine_Controller/index');
        }

        // Vérification si le box existe
        if (!($box = $this->Vitrine_Model->get_box_details($box_id))) {
            log_message('error', 'Tentative de réservation pour un box inexistant : ' . $box_id);
            $this->session->set_flashdata('error', 'Box introuvable.');
            redirect('Vitrine_Controller/index');
        }

        // Vérification des dates
        if (!$this->is_valid_date($start_date) || !$this->is_valid_date($end_date) || $start_date >= $end_date) {
            log_message('error', 'Dates invalides pour la réservation du box ' . $box_id);
            $this->session->set_flashdata('error', 'Les dates de réservation sont invalides.');
            redirect('Vitrine_Controller/detail/' . $box_id);
        }

        // Vérification de la disponibilité
        if (!$this->Vitrine_Model->is_box_available($box_id, $start_date, $end_date)) {
            log_message('error', 'Box déjà réservé : ' . $box_id);
            $this->session->set_flashdata('error', 'Ce box est déjà réservé sur cette période.');
            redirect('Vitrine_Controller/detail/' . $box_id);
        }

        // Vérification si l'utilisateur est connecté
        if (!$this->session->userdata('id_user_box')) {
            // Stockage temporaire des infos de réservation
            $this->session->set_userdata('reservation_temp', compact('box_id', 'start_date', 'end_date'));

            // Stockage de l'URL précédente pour redirection après connexion
            $this->session->set_userdata('redirect_url', site_url('Vitrine_Controller/detail/' . $box_id));

            // Redirection vers la connexion
            redirect('Identification_Controller/identification');
        }

        // Si l'utilisateur est connecté, passer directement à la validation
        $this->session->set_userdata('reservation_data', compact('box_id', 'start_date', 'end_date'));
        redirect('User_Controller/valider_reservation');
    }    

    // Vérification de format de date
    private function is_valid_date($date) {
        $d = DateTime::createFromFormat('Y-m-d', $date);
        return $d && $d->format('Y-m-d') === $date;
    }
}
?>


Vitrine_Model :
<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class Vitrine_Model extends Main_Model {

    public function __construct() {
        parent::__construct();
    }

    // Récupérer les box avec tri sécurisé (ASC ou DESC)
    public function get_sorted_boxes($sort = 'num', $order = 'ASC') {
        $allowed_sorts = ['num', 'size', 'available'];
        $allowed_orders = ['ASC', 'DESC'];

        if (!in_array($sort, $allowed_sorts)) {
            $sort = 'num'; // Valeur par défaut
        }
        if (!in_array(strtoupper($order), $allowed_orders)) {
            $order = 'ASC'; // Valeur par défaut
        }

        $this->db->order_by($sort, $order);
        return $this->db->get('box')->result();
    }

    // Détails d'un box sécurisé
    public function get_box_details($id) {
        $id = (int) $id;

        if ($id <= 0) {
            log_message('error', "get_box_details() - ID de box invalide : $id");
            return null;
        }

        $this->db->select('id_box, num, size, id_warehouse, available');
        $this->db->from('box');
        $this->db->where('id_box', $id);
        $query = $this->db->get();

        if ($query->num_rows() === 0) {
            log_message('error', "get_box_details() - Box introuvable avec ID : $id");
            return null;
        }

        return $query->row();
    }

    // Vérifier si un box est disponible pour une période donnée
    public function is_box_available($box_id, $start_date, $end_date) {
        $this->db->where('box_id', (int) $box_id);
        $this->db->where('start_date <=', $end_date);
        $this->db->where('end_date >=', $start_date);
        $query = $this->db->get('rent');

        return $query->num_rows() === 0;
    }

    // Récupérer tous les box disponibles pour une période donnée
    public function get_available_boxes($start_date, $end_date) {
        $subquery = $this->db->select('box_id')
                             ->from('rent')
                             ->where('start_date <=', $end_date)
                             ->where('end_date >=', $start_date)
                             ->get_compiled_select();

        $this->db->where("id_box NOT IN ($subquery)", null, false);
        return $this->db->get('box')->result();
    }
}
?>

Identification_Model :
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Identification_Model extends Main_Model {

    public function __construct() {
        parent::__construct();
    }

    // Vérifier si un utilisateur existe avec son email et mot de passe
    public function check_user($email, $password) {
        log_message('debug', 'Tentative de connexion pour l\'email : ' . $email);

        // Nettoyage de l'email
        $email = trim($email);

        // Vérifier le format de l'email
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            log_message('error', 'Format d\'email invalide : ' . $email);
            return false;
        }

        // Récupération de l'utilisateur
        $this->db->where('email', $email);
        $query = $this->db->get('user_box');

        if ($query->num_rows() !== 1) {
            log_message('error', 'Échec de connexion (identifiants invalides)');
            return false;
        }

        $user = $query->row();

        // Vérification du mot de passe
        if (empty($user->password) || !password_verify($password, $user->password)) {
            log_message('error', 'Échec de connexion (identifiants invalides)');
            return false;
        }

        log_message('debug', 'Connexion réussie pour : ' . $email);
        return $user;
    }

    // Inscrire un nouvel utilisateur
    public function register_client($data) {
        // Nettoyage de l'email
        $data['email'] = trim($data['email']);

        // Vérification du format d'email
        if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            log_message('error', 'Inscription échouée : Email invalide');
            return false;
        }

        // Vérifier si l'email existe déjà
        if ($this->db->get_where('user_box', ['email' => $data['email']])->num_rows() > 0) {
            log_message('error', 'Inscription échouée : Email déjà utilisé');
            return false;
        }

        // Vérifier si le mot de passe est déjà haché (évite un double hash)
        if (!password_get_info($data['password'])['algo']) {
            $data['password'] = password_hash($data['password'], PASSWORD_ARGON2I);
        }

        if ($this->insert('user_box', $data)) {
            log_message('debug', 'Nouvel utilisateur inscrit : ' . $data['email']);
            return true;
        } else {
            log_message('error', 'Échec de l\'inscription pour : ' . $data['email']);
            return false;
        }
    }

    // Vérifier si un email existe déjà
    public function check_email_exists($email) {
        $query = $this->db->get_where('user_box', ['email' => $email]);
        return $query->num_rows() > 0;
    }
}
?>


Identification_Controller:
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class Identification_Controller extends CI_Controller {

    public function __construct() {
        parent::__construct();
        $this->load->model('Identification_Model');
        $this->load->library('session');
    }

    // Afficher la page d'identification
    public function identification() {
        // Rediriger si déjà connecté
        if ($this->session->userdata('id_user_box')) {
            $redirect_url = $this->session->userdata('redirect_url') ?? 'User_Controller/dashboard';
            $this->session->unset_userdata('redirect_url');
            redirect($redirect_url);
        }

        $this->load->view('identification');
    }

    // Gérer la connexion utilisateur
    public function login() {
        $email = trim($this->input->post('email', true));
        $password = $this->input->post('password');

        log_message('debug', 'Tentative de connexion pour : ' . $email);

        // Vérifier l'email et le mot de passe
        if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $this->session->set_flashdata('error', 'Format d\'email invalide.');
            redirect('Identification_Controller/identification');
        }

        if (empty($password)) {
            $this->session->set_flashdata('error', 'Le mot de passe est requis.');
            redirect('Identification_Controller/identification');
        }

        // Vérifier l'utilisateur
        $user = $this->Identification_Model->check_user($email, $password);

        if ($user) {
            log_message('debug', 'Connexion réussie pour : ' . $email);

            // Stocker les informations utilisateur
            $this->session->set_userdata([
                'id_user_box' => $user->id_user_box,
                'email' => $user->email,
                'admin' => $user->admin
            ]);

            // Si une réservation est en attente, rediriger vers sa validation
            if ($this->session->userdata('reservation_temp')) {
                $this->session->set_userdata('reservation_data', $this->session->userdata('reservation_temp'));
                $this->session->unset_userdata('reservation_temp');
                redirect('User_Controller/valider_reservation');
            }

            // Redirection après connexion
            $redirect_url = $this->session->userdata('redirect_url') ?? 'Vitrine_Controller/index';
            $this->session->unset_userdata('redirect_url');
            redirect($redirect_url);
        } else {
            log_message('error', 'Échec de connexion pour : ' . $email);
            $this->session->set_flashdata('error', 'Email ou mot de passe incorrect.');
            redirect('Identification_Controller/identification');
        }
    }

    // Déconnexion
    public function logout() {
        $this->session->sess_destroy();
        redirect('Vitrine_Controller/index');
    }

    // Afficher la page d'inscription client
    public function inscription_client() {
        if ($this->session->userdata('id_user_box')) {
            redirect('Vitrine_Controller/index');
        }
        $this->load->view('inscription_client');
    }

    // Gérer l'inscription client
    public function register() {
        $email = trim($this->input->post('email', true));
        $password = $this->input->post('password');

        log_message('debug', 'Tentative d\'inscription pour : ' . $email);

        // Vérifications des champs
        if (empty($email) || !filter_var($email, FILTER_VALIDATE_EMAIL)) {
            $this->session->set_flashdata('error', 'Format d\'email invalide.');
            redirect('Identification_Controller/inscription_client');
        }

        if (empty($password) || strlen($password) < 6) {
            $this->session->set_flashdata('error', 'Le mot de passe doit contenir au moins 6 caractères.');
            redirect('Identification_Controller/inscription_client');
        }

        // Vérifier si l'email existe déjà
        if ($this->Identification_Model->check_email_exists($email)) {
            $this->session->set_flashdata('error', 'Cet email est déjà utilisé.');
            redirect('Identification_Controller/inscription_client');
        }

        // Hachage du mot de passe et enregistrement
        $data = [
            'email' => htmlspecialchars($email),
            'password' => password_hash($password, PASSWORD_ARGON2I),
            'admin' => 0,
            'level' => 1
        ];

        if ($this->Identification_Model->register_client($data)) {
            log_message('debug', 'Inscription réussie pour : ' . $email);
            $this->session->set_flashdata('success', 'Inscription réussie, veuillez vous connecter.');
            redirect('Identification_Controller/identification');
        } else {
            log_message('error', 'Échec de l\'inscription pour : ' . $email);
            $this->session->set_flashdata('error', 'Erreur lors de l\'inscription.');
            redirect('Identification_Controller/inscription_client');
        }
    }
}
?>


User_Model:
<?php if (!defined('BASEPATH')) exit('No direct script access allowed');

class User_Model extends Main_Model {

    public function __construct() {
        parent::__construct();
    }

    // Récupérer les informations d'un utilisateur par son email (avec validation)
    public function get_user_by_email($email) {
        // Nettoyage et validation de l'email
        $email = trim($email);
        if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
            log_message('error', 'Requête invalide pour un email mal formé : ' . $email);
            return null;
        }

        return $this->db->get_where('user_box', ['email' => $email])->row();
    }

    // Mettre à jour le mot de passe de l'utilisateur (avec validation)
    public function update_password($id_user_box, $new_password) {
        // Vérification de l'ID utilisateur
        $id_user_box = (int) $id_user_box;
        if ($id_user_box <= 0) {
            log_message('error', 'Tentative de mise à jour de mot de passe avec un ID invalide.');
            return false;
        }

        // Vérification de la complexité du mot de passe
        if (strlen($new_password) < 8) {
            log_message('error', 'Mot de passe trop court pour l\'ID utilisateur : ' . $id_user_box);
            return false;
        }

        // Hachage sécurisé du mot de passe
        $hashed_password = password_hash($new_password, PASSWORD_ARGON2I);

        // Mise à jour du mot de passe
        return $this->update('user_box', $id_user_box, ['password' => $hashed_password]);
    }
}
?>


User_Controller:<?php
defined('BASEPATH') OR exit('No direct script access allowed');

class User_Controller extends CI_Controller {

    public function __construct() {
        parent::__construct();
        $this->load->model('User_Model');
        $this->load->library('session');
        $this->load->library('form_validation');
    }

    // Vérifier si l'utilisateur est connecté
    private function check_auth() {
        if (!$this->session->userdata('id_user_box')) {
            $this->session->set_flashdata('error', 'Veuillez vous connecter pour accéder à cette page.');
            redirect('Identification_Controller/identification');
        }
    }

    // Page de réservation avec messages
    public function reserver() {
        $this->check_auth();

        // Récupérer les données de réservation si elles existent
        $reservation_data = $this->session->userdata('reservation_data');
        $data['reservation'] = $reservation_data;

        // Charger la vue
        $this->load->view('reserver', $data);
    }

    // Valider la réservation après connexion
    public function valider_reservation() {
        $this->check_auth();

        $reservation_data = $this->session->userdata('reservation_data');
        if (!$reservation_data) {
            $this->session->set_flashdata('error', 'Aucune réservation en attente.');
            redirect('Vitrine_Controller/index');
        }

        $data = [
            'user_id' => $this->session->userdata('id_user_box'),
            'box_id' => $reservation_data['box_id'],
            'start_date' => $reservation_data['start_date'],
            'end_date' => $reservation_data['end_date']
        ];

        if ($this->db->insert('rent', $data)) {
            log_message('info', 'Réservation réussie pour l\'utilisateur ID ' . $data['user_id']);
            $this->session->set_flashdata('success', 'Votre réservation a été confirmée avec succès !');
        } else {
            log_message('error', 'Erreur lors de l\'enregistrement de la réservation pour l\'utilisateur ID ' . $data['user_id']);
            $this->session->set_flashdata('error', 'Erreur lors de la confirmation de la réservation.');
        }

        $this->session->unset_userdata('reservation_data');

        // Rediriger vers la page de réservation (reserver.php) avec le message de succès
        redirect('User_Controller/reserver');
    }

    // Affichage de la page de changement de mot de passe
    public function changement_mdp() {
        $this->check_auth();
        $this->load->view('changement_mdp');
    }

    // Mise à jour du mot de passe
    public function update_password() {
        $this->check_auth();

        $id_user = $this->session->userdata('id_user_box');
        $new_password = $this->input->post('new_password');

        // Validation du mot de passe
        $this->form_validation->set_rules('new_password', 'Mot de passe', 'required|min_length[6]');
        if ($this->form_validation->run() == FALSE) {
            $this->session->set_flashdata('error', 'Le mot de passe doit contenir au moins 6 caractères.');
            redirect('User_Controller/changement_mdp');
        }

        // Hashage du mot de passe avant stockage
        $hashed_password = password_hash($new_password, PASSWORD_BCRYPT);

        // Mise à jour en base de données
        if ($this->User_Model->update_password($id_user, $hashed_password)) {
            log_message('info', 'Mot de passe mis à jour pour l\'utilisateur ID ' . $id_user);
            $this->session->set_flashdata('success', 'Mot de passe mis à jour avec succès.');
        } else {
            log_message('error', 'Erreur lors de la mise à jour du mot de passe pour l\'utilisateur ID ' . $id_user);
            $this->session->set_flashdata('error', 'Erreur lors de la mise à jour du mot de passe.');
        }

        redirect('User_Controller/changement_mdp');
    }
}
?>
